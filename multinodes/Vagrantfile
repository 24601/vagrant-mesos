# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require './lib/gen_node_infos'

base_dir = File.expand_path(File.dirname(__FILE__))
cluster_yml = YAML.load(File.read(File.join(base_dir, "cluster.yml")))
node_infos = gen_node_infos(cluster_yml)
master_infos = node_infos[:master]
slave_infos = node_infos[:slave]
zk_infos = node_infos[:zk]


## vagrant plugins required:
# vagrant-berkshelf, vagrant-omnibus, vagrant-hosts
Vagrant.configure("2") do |config|
  config.vm.box = "Official Ubuntu 12.04 daily Cloud Image amd64 (VirtualBox 4.1.12)"
  config.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box"

  # enable plugins
  config.berkshelf.enabled = true
  config.omnibus.chef_version = :latest

  # STRONGLY RECOMMENDED
  # if you want to use vagrant-cachier vagrant plugin,
  # please activate below.
  config.cache.auto_detect = true

  # define VMs. all VMs has identical configuration.
  ninfolist = [master_infos, slave_infos, zk_infos].flatten
  ninfolist.each_with_index do |ninfo, i|
    config.vm.define ninfo[:hostname] do |cfg|
      cfg.vm.hostname = ninfo[:hostname]
      cfg.vm.network :private_network, :ip => ninfo[:ip]
      cfg.vm.provision :hosts

#      if ninfo[:hostname].start_with? "master" then
#        hostport = (/master(\d+)/.match ninfo[:hostname])[1].to_i*10000+5050
#      end

      cfg.vm.provider :virtualbox do |vb|
        vb.name = 'vagrant-mesos-' + ninfo[:hostname]
        # Use VBoxManage to customize the VM. For example to change memory:
        vb.customize ["modifyvm", :id, "--memory", ninfo[:mem] ]
      end

      cfg.vm.provision :shell do |s|
        s.path = "scripts/populate_sshkey.sh"
        s.args = "/root root"
      end

      cfg.vm.provision :shell do |s|
        s.path = "scripts/populate_sshkey.sh"
        s.args = "/home/vagrant vagrant"
      end

      cfg.vm.provision :chef_solo do |chef|
        chef.log_level = :debug
        chef.add_recipe "apt"
#       chef.add_recipe "maven"
        chef.add_recipe "mesos"

        java_setting = {
          'install_flavor' => "oracle",
          'jdk_version' => "6",
          'oracle' => {
            'accept_oracle_download_terms' => true
          }
        }

        maven_setting = {
          :version => "3",
          "3" => {
            :version => "3.0.5"
          },
          :mavenrc => {
            :opts  => "-Dmaven.repo.local=$HOME/.m2/repository -Xmx384m -XX:MaxPermSize=192m"
          }
        }

        mesos_setting = {
          :version      => "master",
          :cluster_name => "MyCluster",
          :home         => "/home/vagrant",
          :master_ips   => master_infos.map{|m| "#{m[:ip]}" },
          :slave_ips    => slave_infos.map{|s| "#{s[:ip]}" },
        }

        if /master[0-9]+/ =~ ninfo[:hostname] then
          chef.add_recipe "mesos::master"
          mesos_setting[:master] = if zk_infos.length > 0 then
             {
               :zk => "zk://"+zk_infos.map{|zk| zk[:ip]+":2181"}.join(", ")+"/mesos",
               :ip => "#{ninfo[:ip]}"
             }
          else
             {
               :ip => "#{ninfo[:ip]}"
             }
          end
        elsif /slave[0-9]+/ =~ ninfo[:hostname] then
          chef.add_recipe "mesos::slave"
          mesos_setting[:slave]= {
            :master_url => zk_infos.length > 0 ? "zk://"+zk_infos.map{|zk| zk[:ip]+":2181"}.join(", ")+"/mesos":"#master_infos[0][:ip]}:5050",
            :ip         => "#{ninfo[:ip]}"
          }
        end
        chef.json = {
          :java  => java_setting,
          :maven => maven_setting,
          :mesos => mesos_setting
        }
      end

      if /zk[0-9]+/ =~ ninfo[:hostname] then
        cfg.vm.provision :shell, :inline => "ruby /vagrant/scripts/gen_zoo_conf.rb > /home/vagrant/mesos/build/3rdparty/zookeeper-3.3.4/conf/zoo.cfg"
      end

    end
  end
end
