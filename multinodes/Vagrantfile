# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require './lib/gen_node_infos'

base_dir = File.expand_path(File.dirname(__FILE__))
conf = YAML.load_file(File.join(base_dir, "cluster.yml"))
ninfos = gen_node_infos(conf)
ami = YAML.load_file(File.join(base_dir,"scripts","aws_region_ami.yaml"))

## vagrant plugins required:
# vagrant-aws, vagrant-berkshelf, vagrant-omnibus, vagrant-hosts, vagrant-cachier
Vagrant.configure("2") do |config|

  # enable plugins
  config.berkshelf.enabled = true
  config.omnibus.chef_version = :latest
  config.cache.auto_detect = true

  # define VMs. all VMs has identical configuration.
  [ninfos[:zk], ninfos[:master], ninfos[:slave]].flatten.each_with_index do |ninfo, i|
    config.vm.define ninfo[:hostname] do |cfg|

      cfg.vm.provider :virtualbox do |vb, override|
        override.vm.box = "Official Ubuntu 13.04 daily Cloud Image amd64 (No Guest Additions)"
        override.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box"

        override.vm.hostname = ninfo[:hostname]
        override.vm.network :private_network, :ip => ninfo[:ip]
        override.vm.provision :hosts

        vb.name = 'vagrant-mesos-' + ninfo[:hostname]
        vb.customize ["modifyvm", :id, "--memory", ninfo[:mem] ]

        override.vm.provision :shell do |s|
          s.path = "scripts/populate_sshkey.sh"
          s.args = "/root root"
        end

        override.vm.provision :shell do |s|
          s.path = "scripts/populate_sshkey.sh"
          s.args = "/home/vagrant vagrant"
        end
      end

      cfg.vm.provider :aws do |aws, override|
        override.vm.box = "dummy"
        override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"

        aws.access_key_id = conf["access_key_id"]
        aws.secret_access_key = conf["secret_access_key"]

        aws.region = conf["region"]
        aws.ami = ami[conf["region"]]
        aws.instance_type = ninfo[:instance_type]
        aws.keypair_name = conf["keypair_name"]
        aws.subnet_id = conf["subnet_id"]
        aws.security_groups = conf["security_groups"]
        aws.private_ip_address = ninfo[:ip]
        aws.tags = {
          Name: "vagrant-mesos-#{ninfo[:hostname]}"
        }

        override.ssh.username = "ubuntu"
        override.ssh.private_key_path = conf["ssh_private_key_path"]

        override.vm.provision :shell do |s|
          s.path = "scripts/populate_sshkey.sh"
          s.args = "/home/ubuntu ubuntu"
        end
      end

      cfg.vm.provision :chef_solo do |chef|
#       chef.log_level = :debug
        chef.add_recipe "apt"
        chef.add_recipe "mesos"

        if /master[0-9]+/ =~ ninfo[:hostname] then
          chef.add_recipe "mesos::master"
          chef.json  = {
            :mesos=> {
              :type         => "mesosphere",
              :version      => conf[:mesos_version],
              :master_ips   => ninfos[:master].map { |m| "#{m[:ip]}" },
              :slave_ips    => ninfos[:slave].map { |s| "#{s[:ip]}" },
              :master       => if ninfos[:zk].length > 0 then
                {
                  :cluster => "MyCluster",
                  :zk => "zk://"+ninfos[:zk].map{|zk| zk[:ip]+":2181"}.join(", ")+"/mesos",
                  :ip => "#{ninfo[:ip]}"
                }
              else
                {
                  :cluster => "MyCluster",
                  :ip => "#{ninfo[:ip]}"
                }
              end
            }
          }
        elsif /slave[0-9]+/ =~ ninfo[:hostname] then
          chef.add_recipe "mesos::slave"
          chef.json = {
            :mesos => {
              :type         => "mesosphere",
              :version      => conf[:mesos_version],
              :slave        => {
                :master       => if ninfos[:zk].length > 0 then
                                   "zk://"+ninfos[:zk].map{|zk| zk[:ip]+":2181"}.join(", ")+"/mesos"
                                 else
                                   "#{ninfos[:master][0][:ip]}:5050"
                                 end,
                :ip           => "#{ninfo[:ip]}"
              }
            }
          }
        elsif /zk[0-9]+/ =~ ninfo[:hostname] then
          chef.json = {
            :mesos => {
              :type         => "mesosphere",
              :version      => conf[:mesos_version],
              :mesosphere   => {
                :with_zookeeper => true
              }
            }
          }
        end
      end

      if /zk[0-9]+/ =~ ninfo[:hostname] then
        myid = (/zk([0-9]+)/.match ninfo[:hostname])[1]
        cfg.vm.provision :shell, :inline => <<SCRIPT
          sudo mkdir -p /tmp/zookeeper
          sudo chmod 755 /tmp/zookeeper
          sudo chown zookeeper /tmp/zookeeper
          sudo -u zookeeper echo #{myid} > /tmp/zookeeper/myid
          sudo -u zookeeper /opt/chef/embedded/bin/ruby /vagrant/scripts/gen_zoo_conf.rb > /etc/zookeeper/conf/zoo.cfg
          sudo restart zookeeper
SCRIPT
      end
    end
  end
end
